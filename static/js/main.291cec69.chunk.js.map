{"version":3,"sources":["Firebase.js","NoteHelpers.js","Components/Note.js","Components/Canvas.js","Components/Menubar.js","App.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","createNote","numNotes","a","date","Date","now","docRef","doc","db","payload","time","name","text","setDoc","alert","deleteNote","window","confirm","deleteDoc","textChanged","length","Note","noteFuncs","noteInfo","className","type","id","value","onInput","document","getElementById","onClick","placeholder","Canvas","notes","map","i","Menubar","App","documentElement","useState","setNotes","useEffect","onSnapshot","collection","snapshot","docs","data","ReactDOM","render","StrictMode"],"mappings":"gVAiBAA,YAVuB,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAKMC,oBCVTC,EAAU,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,2DACdD,EANa,IAKC,uBAETE,EAAO,GAAKC,KAAKC,MACjBC,EAASC,YAAIC,EAAI,QAASL,GAC1BM,EAAU,CACdC,KAAMP,EACNQ,KAAM,WACNC,KAAM,IAPO,SAUTC,YAAOP,EAAQG,GAVN,6BAYfK,MAAM,2EAZS,2CAAH,sDAiBVC,EAAU,uCAAG,WAAOL,GAAP,eAAAR,EAAA,0DACdc,OAAOC,QAAQ,8CADD,uBAETX,EAASC,YAAIC,EAAI,QAASE,GAFjB,SAGTQ,YAAUZ,GAHD,2CAAH,sDAQVa,EAAW,uCAAG,qCAAAjB,EAAA,yDAAQQ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,OACnCD,EAAKS,OA9BW,IA8BcR,EAAKQ,OA7BnB,KA4BD,uBAEVd,EAASC,YAAIC,EAAI,QAASE,GAC1BD,EAAU,CACdC,KAAMA,EACNC,KAAMA,EACNC,KAAMA,GANQ,SASVC,YAAOP,EAAQG,GATL,6BAWhBK,MAAM,0EAXU,2CAAH,sD,qBChBFO,MAdf,YAAyF,IAAD,IAAvEC,UAAYP,EAA2D,EAA3DA,WAAYI,EAA+C,EAA/CA,YAA+C,IAAjCI,SAAWb,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KAC5E,OACE,sBAAKY,UAAU,OAAf,UACE,sBAAKA,UAAU,SAAf,UACE,uBAAOC,KAAK,OAAOC,GAAI,UAAYhB,EAAMiB,MAAOhB,EAAMiB,QAAS,kBAAMT,EAAY,CAACT,KAAMA,EAAMC,KAAMkB,SAASC,eAAe,UAAYpB,GAAMiB,MAAOf,KAAMA,OAC3J,mBAAGmB,QAAS,kBAAMhB,EAAWL,IAA7B,oBAEF,qBAAKc,UAAU,UAAf,SACE,0BAAUE,GAAI,QAAUhB,EAAMsB,YAAY,qBAAqBL,MAAOf,EAAMgB,QAAS,kBAAMT,EAAY,CAACT,KAAMA,EAAMC,KAAMA,EAAMC,KAAMiB,SAASC,eAAe,QAAUpB,GAAMiB,iBCIvKM,MAVf,YAA4B,IAAVC,EAAS,EAATA,MAChB,OACE,qBAAKV,UAAU,SAAf,SACGU,EAAMC,KAAI,SAACZ,EAAUa,GACpB,OAAO,cAAC,EAAD,CAAMd,UAAW,CAACP,WAAYA,EAAYI,YAAaA,GAAcI,SAAUA,GAAea,S,MCG9FC,MAVf,YAA4C,IAAzBrC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SAC7B,OACE,sBAAKuB,UAAU,UAAf,UACE,6CACA,wBAAQO,QAAS,kBAAM/B,EAAWC,IAAlC,uBACA,sDCsBSqC,MApBf,WAEET,SAASU,gBAAgBf,WAAe,iBAAkBK,SAASU,gBAAmB,SAAW,GAEjG,MAA0BC,mBAAS,IAAnC,mBAAON,EAAP,KAAcO,EAAd,KAQA,OANAC,qBAAU,kBACRC,WADc,CACHC,YAAWpC,EAAI,UAAU,SAACqC,GACnCJ,EAASI,EAASC,KAAKX,KAAI,SAAA5B,GAAG,OAAIA,EAAIwC,gBAEvC,IAGD,sBAAKvB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQU,MAAOA,IACf,cAAC,EAAD,CAASlC,WAAYA,EAAYC,SAAUiC,EAAMd,aCnBvD4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASC,eAAe,W","file":"static/js/main.291cec69.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from 'firebase/firestore';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCgAvSP3oBsLrOelBBIiNKG72EtUe2B7Gg\",\n  authDomain: \"global-notes.firebaseapp.com\",\n  projectId: \"global-notes\",\n  storageBucket: \"global-notes.appspot.com\",\n  messagingSenderId: \"960716700944\",\n  appId: \"1:960716700944:web:a10af48f8c46447dc4f995\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nexport default getFirestore();","import db from './Firebase';\nimport { setDoc, doc, deleteDoc } from '@firebase/firestore';\n\nconst MAX_NOTES = 10;\nconst MAX_NAME_LEN = 50;\nconst MAX_TEXT_LEN = 10000;\n\n// When user clicks add button\nconst createNote = async (numNotes) => {\n  if(numNotes < MAX_NOTES){\n    const date = \"\" + Date.now();\n    const docRef = doc(db, \"notes\", date); // connect to notes collection\n    const payload = {\n      time: date,\n      name: \"New Note\",\n      text: \"\"\n    };\n\n    await setDoc(docRef, payload); // Add the doc to the firebase storage\n  } else {\n    alert(\"You have too many notes.\\nDelete one to make a new note.\\nMax notes: \" + MAX_NOTES);\n  }\n}\n\n// When user clicks delete button\nconst deleteNote = async (time) => {\n  if(window.confirm(\"Are you sure you want to delete this note?\")){ // Confirm the user wants to delete the note\n    const docRef = doc(db, \"notes\", time); // select the doc with the time\n    await deleteDoc(docRef); // delete the doc\n  }\n}\n\n// When a user types in a text box\nconst textChanged = async ({time, name, text}) => {\n  if(name.length < MAX_NAME_LEN && text.length < MAX_TEXT_LEN){\n    const docRef = doc(db, \"notes\", time); // find the doc with the ID as the same ID\n    const payload = { // create the new payload with the new text\n      time: time,\n      name: name,\n      text: text,\n    };\n\n    await setDoc(docRef, payload); // set to database\n  } else {\n    alert(\"The text is max length. If you need to keep noting, create a new note.\");\n  }\n  \n}\n\nexport {\n  createNote,\n  deleteNote,\n  textChanged\n}","\nimport '../Styles/Note.css';\n\nfunction Note( { noteFuncs: {deleteNote, textChanged}, noteInfo: {time, name, text} } ) {\n  return (\n    <div className=\"note\">\n      <div className=\"header\">\n        <input type=\"text\" id={\"header-\" + time} value={name} onInput={() => textChanged({time: time, name: document.getElementById(\"header-\" + time).value, text: text})} />\n        <p onClick={() => deleteNote(time)}>DEL</p>\n      </div>\n      <div className=\"content\">\n        <textarea id={\"text-\" + time} placeholder=\"Enter text here...\" value={text} onInput={() => textChanged({time: time, name: name, text: document.getElementById(\"text-\" + time).value})} />\n      </div>\n    </div>\n  );\n}\n\nexport default Note;\n","import { deleteNote, textChanged } from '../NoteHelpers.js';\n\nimport '../Styles/Canvas.css';\nimport Note from './Note';\n\nfunction Canvas({ notes }) {\n  return (\n    <div className=\"canvas\">\n      {notes.map((noteInfo, i) => {\n        return <Note noteFuncs={{deleteNote: deleteNote, textChanged: textChanged}} noteInfo={noteInfo} key={i} />\n      })}\n    </div>\n  );\n}\n\nexport default Canvas;\n","import '../Styles/Menubar.css';\n\nfunction Menubar({ createNote, numNotes }) {\n  return (\n    <div className=\"menubar\">\n      <p>Global Notes</p>\n      <button onClick={() => createNote(numNotes)}>Add Note!</button>\n      <p>Created by dnhen.</p>\n    </div>\n  );\n}\n\nexport default Menubar;\n","import './App.css';\nimport { useState, useEffect } from 'react';\nimport { onSnapshot, collection } from '@firebase/firestore';\nimport { createNote } from './NoteHelpers.js';\nimport db from './Firebase';\n\nimport Canvas from './Components/Canvas';\nimport Menubar from './Components/Menubar';\n\nfunction App() {\n  // Add a touch or no-touch class to the document to determine in CSS if device is touch screen or not (dragging doesnt work on touch screens)\n  document.documentElement.className += ((\"ontouchstart\" in document.documentElement) ? ' touch' : '');\n\n  const [notes, setNotes] = useState([]); // state to store all notes\n\n  useEffect(() => // useEffect to update notes state when the firebase database changes\n    onSnapshot(collection(db, \"notes\"), (snapshot) => {\n      setNotes(snapshot.docs.map(doc => doc.data()))\n    }\n  ), []);\n\n  return (\n    <div className=\"app\">\n      <Canvas notes={notes} />\n      <Menubar createNote={createNote} numNotes={notes.length} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}