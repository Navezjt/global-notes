{"version":3,"sources":["Firebase.js","NoteHelpers.js","Components/Note.js","Components/Canvas.js","Components/Menubar.js","App.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","createNote","numNotes","a","date","Date","now","docRef","doc","db","payload","time","name","text","setDoc","alert","deleteNote","window","confirm","deleteDoc","textChanged","e","cursorPos","target","selectionStart","length","selectionEnd","Note","noteFuncs","noteInfo","className","type","id","value","onInput","onClick","placeholder","Canvas","notes","map","i","Menubar","App","document","documentElement","useState","setNotes","useEffect","onSnapshot","collection","snapshot","docs","data","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3d6f2302.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from 'firebase/firestore';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCgAvSP3oBsLrOelBBIiNKG72EtUe2B7Gg\",\n  authDomain: \"global-notes.firebaseapp.com\",\n  projectId: \"global-notes\",\n  storageBucket: \"global-notes.appspot.com\",\n  messagingSenderId: \"960716700944\",\n  appId: \"1:960716700944:web:a10af48f8c46447dc4f995\"\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nexport default getFirestore();","import db from './Firebase';\nimport { setDoc, doc, deleteDoc } from '@firebase/firestore';\n\nconst MAX_NOTES = 10;\nconst MAX_NAME_LEN = 50;\nconst MAX_TEXT_LEN = 10000;\n\n// When user clicks add button\nconst createNote = async (numNotes) => {\n  if(numNotes < MAX_NOTES){\n    const date = \"\" + Date.now();\n    const docRef = doc(db, \"notes\", date); // connect to notes collection\n    const payload = {\n      time: date,\n      name: \"New Note\",\n      text: \"\"\n    };\n\n    await setDoc(docRef, payload); // Add the doc to the firebase storage\n  } else {\n    alert(\"You have too many notes.\\nDelete one to make a new note.\\nMax notes: \" + MAX_NOTES);\n  }\n}\n\n// When user clicks delete button\nconst deleteNote = async (time) => {\n  if(window.confirm(\"Are you sure you want to delete this note?\")){ // Confirm the user wants to delete the note\n    const docRef = doc(db, \"notes\", time); // select the doc with the time\n    await deleteDoc(docRef); // delete the doc\n  }\n}\n\n// When a user types in a text box\nconst textChanged = async ({time, name, text, e}) => {\n  let cursorPos = e.target.selectionStart; // Get the position of the cursor\n\n  if(name.length < MAX_NAME_LEN && text.length < MAX_TEXT_LEN){\n    const docRef = doc(db, \"notes\", time); // find the doc with the ID as the same ID\n    const payload = { // create the new payload with the new text\n      time: time,\n      name: name,\n      text: text,\n    };\n\n    await setDoc(docRef, payload); // set to database\n  } else {\n    alert(\"The text is max length. If you need to keep noting, create a new note.\");\n  }\n\n  // Set the cursor back to where it was before the update\n  e.target.selectionStart = cursorPos;\n  e.target.selectionEnd = cursorPos;\n}\n\nexport {\n  createNote,\n  deleteNote,\n  textChanged\n}","\nimport '../Styles/Note.css';\n\nfunction Note( { noteFuncs: {deleteNote, textChanged}, noteInfo: {time, name, text} } ) {\n  return (\n    <div className=\"note\">\n      <div className=\"header\">\n        <input type=\"text\" id={\"header-\" + time} value={name} onInput={(e) => textChanged({time: time, name: e.target.value, text: text, e: e})} />\n        <p className=\"delButton\" onClick={() => deleteNote(time)}>DEL</p>\n      </div>\n      <div className=\"content\">\n        <textarea id={\"text-\" + time} placeholder=\"Enter text here...\" value={text} onInput={(e) => textChanged({time: time, name: name, text: e.target.value, e: e})} />\n      </div>\n    </div>\n  );\n}\n\nexport default Note;\n","import { deleteNote, textChanged } from '../NoteHelpers.js';\n\nimport '../Styles/Canvas.css';\nimport Note from './Note';\n\nfunction Canvas({ notes }) {\n  return (\n    <div className=\"canvas\">\n      {notes.map((noteInfo, i) => {\n        return <Note noteFuncs={{deleteNote: deleteNote, textChanged: textChanged}} noteInfo={noteInfo} key={i} />\n      })}\n    </div>\n  );\n}\n\nexport default Canvas;\n","import '../Styles/Menubar.css';\n\nfunction Menubar({ createNote, numNotes }) {\n  return (\n    <div className=\"menubar\">\n      <p>Global Notes</p>\n      <button onClick={() => createNote(numNotes)}>Add Note!</button>\n      <p>Created by dnhen.</p>\n    </div>\n  );\n}\n\nexport default Menubar;\n","import './App.css';\nimport { useState, useEffect } from 'react';\nimport { onSnapshot, collection } from '@firebase/firestore';\nimport { createNote } from './NoteHelpers.js';\nimport db from './Firebase';\n\nimport Canvas from './Components/Canvas';\nimport Menubar from './Components/Menubar';\n\nfunction App() {\n  // Add a touch or no-touch class to the document to determine in CSS if device is touch screen or not (dragging doesnt work on touch screens)\n  document.documentElement.className += ((\"ontouchstart\" in document.documentElement) ? ' touch' : '');\n\n  const [notes, setNotes] = useState([]); // state to store all notes\n\n  useEffect(() => // useEffect to update notes state when the firebase database changes\n    onSnapshot(collection(db, \"notes\"), (snapshot) => {\n      setNotes(snapshot.docs.map(doc => doc.data()))\n    }\n  ), []);\n\n  return (\n    <div className=\"app\">\n      <Canvas notes={notes} />\n      <Menubar createNote={createNote} numNotes={notes.length} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}